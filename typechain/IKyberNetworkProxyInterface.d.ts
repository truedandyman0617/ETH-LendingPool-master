/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IKyberNetworkProxyInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "enabled()": FunctionFragment;
    "getExpectedRate(address,address,uint256)": FunctionFragment;
    "getUserCapInTokenWei(address,address)": FunctionFragment;
    "getUserCapInWei(address)": FunctionFragment;
    "info(bytes32)": FunctionFragment;
    "maxGasPrice()": FunctionFragment;
    "tradeWithHint(address,uint256,address,address,uint256,uint256,address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "enabled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExpectedRate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCapInTokenWei",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCapInWei",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "info", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "maxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeWithHint",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "enabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCapInTokenWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCapInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeWithHint",
    data: BytesLike
  ): Result;

  events: {};
}

export class IKyberNetworkProxyInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IKyberNetworkProxyInterfaceInterface;

  functions: {
    enabled(overrides?: CallOverrides): Promise<[boolean]>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expectedRate: BigNumber;
        slippageRate: BigNumber;
      }
    >;

    getUserCapInTokenWei(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    info(id: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradeWithHint(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  enabled(overrides?: CallOverrides): Promise<boolean>;

  getExpectedRate(
    src: string,
    dest: string,
    srcQty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      expectedRate: BigNumber;
      slippageRate: BigNumber;
    }
  >;

  getUserCapInTokenWei(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserCapInWei(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  info(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  tradeWithHint(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    destAddress: string,
    maxDestAmount: BigNumberish,
    minConversionRate: BigNumberish,
    walletId: string,
    hint: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    enabled(overrides?: CallOverrides): Promise<boolean>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expectedRate: BigNumber;
        slippageRate: BigNumber;
      }
    >;

    getUserCapInTokenWei(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tradeWithHint(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    enabled(overrides?: CallOverrides): Promise<BigNumber>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCapInTokenWei(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tradeWithHint(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCapInTokenWei(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradeWithHint(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      hint: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
