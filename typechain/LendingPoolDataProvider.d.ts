/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LendingPoolDataProviderInterface extends ethers.utils.Interface {
  functions: {
    "DATA_PROVIDER_REVISION()": FunctionFragment;
    "HEALTH_FACTOR_LIQUIDATION_THRESHOLD()": FunctionFragment;
    "addressesProvider()": FunctionFragment;
    "balanceDecreaseAllowed(address,address,uint256)": FunctionFragment;
    "calculateCollateralNeededInETH(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateUserGlobalData(address)": FunctionFragment;
    "core()": FunctionFragment;
    "getHealthFactorLiquidationThreshold()": FunctionFragment;
    "getReserveConfigurationData(address)": FunctionFragment;
    "getReserveData(address)": FunctionFragment;
    "getUserAccountData(address)": FunctionFragment;
    "getUserReserveData(address,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DATA_PROVIDER_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceDecreaseAllowed",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCollateralNeededInETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUserGlobalData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHealthFactorLiquidationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveConfigurationData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReserveData",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DATA_PROVIDER_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceDecreaseAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCollateralNeededInETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUserGlobalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHealthFactorLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveConfigurationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {};
}

export class LendingPoolDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LendingPoolDataProviderInterface;

  functions: {
    DATA_PROVIDER_REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addressesProvider(overrides?: CallOverrides): Promise<[string]>;

    balanceDecreaseAllowed(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    calculateCollateralNeededInETH(
      _reserve: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _userCurrentBorrowBalanceTH: BigNumberish,
      _userCurrentFeesETH: BigNumberish,
      _userCurrentLtv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateUserGlobalData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        totalLiquidityBalanceETH: BigNumber;
        totalCollateralBalanceETH: BigNumber;
        totalBorrowBalanceETH: BigNumber;
        totalFeesETH: BigNumber;
        currentLtv: BigNumber;
        currentLiquidationThreshold: BigNumber;
        healthFactor: BigNumber;
        healthFactorBelowThreshold: boolean;
      }
    >;

    core(overrides?: CallOverrides): Promise<[string]>;

    getHealthFactorLiquidationThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean, boolean, boolean] & {
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
        rateStrategyAddress: string;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        isActive: boolean;
      }
    >;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number
      ] & {
        totalLiquidity: BigNumber;
        availableLiquidity: BigNumber;
        totalBorrows: BigNumber;
        liquidityRate: BigNumber;
        utilizationRate: BigNumber;
        liquidityIndex: BigNumber;
        wvTokenAddress: string;
        lastUpdateTimestamp: number;
      }
    >;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalLiquidityETH: BigNumber;
        totalCollateralETH: BigNumber;
        totalBorrowsETH: BigNumber;
        totalFeesETH: BigNumber;
        availableBorrowsETH: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        currentWvTokenBalance: BigNumber;
        borrowBalance: BigNumber;
        liquidityRate: BigNumber;
        originationFee: BigNumber;
        lastUpdateTimestamp: BigNumber;
        usageAsCollateralEnabled: boolean;
      }
    >;

    initialize(
      _addressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DATA_PROVIDER_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  balanceDecreaseAllowed(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  calculateCollateralNeededInETH(
    _reserve: string,
    _amount: BigNumberish,
    _fee: BigNumberish,
    _userCurrentBorrowBalanceTH: BigNumberish,
    _userCurrentFeesETH: BigNumberish,
    _userCurrentLtv: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateUserGlobalData(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      totalLiquidityBalanceETH: BigNumber;
      totalCollateralBalanceETH: BigNumber;
      totalBorrowBalanceETH: BigNumber;
      totalFeesETH: BigNumber;
      currentLtv: BigNumber;
      currentLiquidationThreshold: BigNumber;
      healthFactor: BigNumber;
      healthFactorBelowThreshold: boolean;
    }
  >;

  core(overrides?: CallOverrides): Promise<string>;

  getHealthFactorLiquidationThreshold(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveConfigurationData(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, boolean, boolean, boolean] & {
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      rateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      isActive: boolean;
    }
  >;

  getReserveData(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      number
    ] & {
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrows: BigNumber;
      liquidityRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      wvTokenAddress: string;
      lastUpdateTimestamp: number;
    }
  >;

  getUserAccountData(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalLiquidityETH: BigNumber;
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      totalFeesETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
    }
  >;

  getUserReserveData(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      currentWvTokenBalance: BigNumber;
      borrowBalance: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
    }
  >;

  initialize(
    _addressesProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DATA_PROVIDER_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    balanceDecreaseAllowed(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculateCollateralNeededInETH(
      _reserve: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _userCurrentBorrowBalanceTH: BigNumberish,
      _userCurrentFeesETH: BigNumberish,
      _userCurrentLtv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUserGlobalData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        totalLiquidityBalanceETH: BigNumber;
        totalCollateralBalanceETH: BigNumber;
        totalBorrowBalanceETH: BigNumber;
        totalFeesETH: BigNumber;
        currentLtv: BigNumber;
        currentLiquidationThreshold: BigNumber;
        healthFactor: BigNumber;
        healthFactorBelowThreshold: boolean;
      }
    >;

    core(overrides?: CallOverrides): Promise<string>;

    getHealthFactorLiquidationThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean, boolean, boolean] & {
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
        rateStrategyAddress: string;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        isActive: boolean;
      }
    >;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number
      ] & {
        totalLiquidity: BigNumber;
        availableLiquidity: BigNumber;
        totalBorrows: BigNumber;
        liquidityRate: BigNumber;
        utilizationRate: BigNumber;
        liquidityIndex: BigNumber;
        wvTokenAddress: string;
        lastUpdateTimestamp: number;
      }
    >;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalLiquidityETH: BigNumber;
        totalCollateralETH: BigNumber;
        totalBorrowsETH: BigNumber;
        totalFeesETH: BigNumber;
        availableBorrowsETH: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        currentWvTokenBalance: BigNumber;
        borrowBalance: BigNumber;
        liquidityRate: BigNumber;
        originationFee: BigNumber;
        lastUpdateTimestamp: BigNumber;
        usageAsCollateralEnabled: boolean;
      }
    >;

    initialize(
      _addressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DATA_PROVIDER_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    balanceDecreaseAllowed(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCollateralNeededInETH(
      _reserve: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _userCurrentBorrowBalanceTH: BigNumberish,
      _userCurrentFeesETH: BigNumberish,
      _userCurrentLtv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUserGlobalData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    getHealthFactorLiquidationThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _addressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DATA_PROVIDER_REVISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceDecreaseAllowed(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateCollateralNeededInETH(
      _reserve: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _userCurrentBorrowBalanceTH: BigNumberish,
      _userCurrentFeesETH: BigNumberish,
      _userCurrentLtv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUserGlobalData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHealthFactorLiquidationThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _addressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
