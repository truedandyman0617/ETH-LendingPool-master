/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILendingPoolAddressesProviderInterface
  extends ethers.utils.Interface {
  functions: {
    "getFeeProvider()": FunctionFragment;
    "getLendingPool()": FunctionFragment;
    "getLendingPoolConfigurator()": FunctionFragment;
    "getLendingPoolCore()": FunctionFragment;
    "getLendingPoolDataProvider()": FunctionFragment;
    "getLendingPoolLiquidationManager()": FunctionFragment;
    "getLendingPoolManager()": FunctionFragment;
    "getLendingPoolParametersProvider()": FunctionFragment;
    "getLendingRateOracle()": FunctionFragment;
    "getPriceOracle()": FunctionFragment;
    "getTokenDistributor()": FunctionFragment;
    "setFeeProviderImpl(address)": FunctionFragment;
    "setLendingPoolConfiguratorImpl(address)": FunctionFragment;
    "setLendingPoolCoreImpl(address)": FunctionFragment;
    "setLendingPoolDataProviderImpl(address)": FunctionFragment;
    "setLendingPoolImpl(address)": FunctionFragment;
    "setLendingPoolLiquidationManager(address)": FunctionFragment;
    "setLendingPoolManager(address)": FunctionFragment;
    "setLendingPoolParametersProviderImpl(address)": FunctionFragment;
    "setLendingRateOracle(address)": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "setTokenDistributor(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getFeeProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolDataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolLiquidationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolParametersProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingRateOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeProviderImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolConfiguratorImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolCoreImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolDataProviderImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolLiquidationManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolParametersProviderImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingRateOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenDistributor",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolLiquidationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolParametersProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeProviderImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolConfiguratorImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolCoreImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolDataProviderImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolLiquidationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolParametersProviderImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenDistributor",
    data: BytesLike
  ): Result;

  events: {};
}

export class ILendingPoolAddressesProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILendingPoolAddressesProviderInterface;

  functions: {
    getFeeProvider(overrides?: CallOverrides): Promise<[string]>;

    getLendingPool(overrides?: CallOverrides): Promise<[string]>;

    getLendingPoolConfigurator(overrides?: CallOverrides): Promise<[string]>;

    getLendingPoolCore(overrides?: CallOverrides): Promise<[string]>;

    getLendingPoolDataProvider(overrides?: CallOverrides): Promise<[string]>;

    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLendingPoolManager(overrides?: CallOverrides): Promise<[string]>;

    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLendingRateOracle(overrides?: CallOverrides): Promise<[string]>;

    getPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    getTokenDistributor(overrides?: CallOverrides): Promise<[string]>;

    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingPoolImpl(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingPoolParametersProviderImpl(
      _parametersProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenDistributor(
      _tokenDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getFeeProvider(overrides?: CallOverrides): Promise<string>;

  getLendingPool(overrides?: CallOverrides): Promise<string>;

  getLendingPoolConfigurator(overrides?: CallOverrides): Promise<string>;

  getLendingPoolCore(overrides?: CallOverrides): Promise<string>;

  getLendingPoolDataProvider(overrides?: CallOverrides): Promise<string>;

  getLendingPoolLiquidationManager(overrides?: CallOverrides): Promise<string>;

  getLendingPoolManager(overrides?: CallOverrides): Promise<string>;

  getLendingPoolParametersProvider(overrides?: CallOverrides): Promise<string>;

  getLendingRateOracle(overrides?: CallOverrides): Promise<string>;

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  getTokenDistributor(overrides?: CallOverrides): Promise<string>;

  setFeeProviderImpl(
    _feeProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingPoolConfiguratorImpl(
    _configurator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingPoolCoreImpl(
    _lendingPoolCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingPoolDataProviderImpl(
    _provider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingPoolImpl(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingPoolLiquidationManager(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingPoolManager(
    _lendingPoolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingPoolParametersProviderImpl(
    _parametersProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingRateOracle(
    _lendingRateOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceOracle(
    _priceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenDistributor(
    _tokenDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getFeeProvider(overrides?: CallOverrides): Promise<string>;

    getLendingPool(overrides?: CallOverrides): Promise<string>;

    getLendingPoolConfigurator(overrides?: CallOverrides): Promise<string>;

    getLendingPoolCore(overrides?: CallOverrides): Promise<string>;

    getLendingPoolDataProvider(overrides?: CallOverrides): Promise<string>;

    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<string>;

    getLendingPoolManager(overrides?: CallOverrides): Promise<string>;

    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<string>;

    getLendingRateOracle(overrides?: CallOverrides): Promise<string>;

    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    getTokenDistributor(overrides?: CallOverrides): Promise<string>;

    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolImpl(_pool: string, overrides?: CallOverrides): Promise<void>;

    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingPoolParametersProviderImpl(
      _parametersProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenDistributor(
      _tokenDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getFeeProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingPoolConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingPoolCore(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingPoolDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLendingPoolManager(overrides?: CallOverrides): Promise<BigNumber>;

    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLendingRateOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingPoolImpl(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingPoolParametersProviderImpl(
      _parametersProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenDistributor(
      _tokenDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFeeProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendingPoolConfigurator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingPoolCore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingPoolDataProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingPoolManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingRateOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingPoolImpl(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingPoolParametersProviderImpl(
      _parametersProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenDistributor(
      _tokenDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
