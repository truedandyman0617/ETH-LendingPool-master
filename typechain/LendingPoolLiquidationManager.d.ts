/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LendingPoolLiquidationManagerInterface
  extends ethers.utils.Interface {
  functions: {
    "addressesProvider()": FunctionFragment;
    "liquidationCall(address,address,address,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [string, string, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;

  events: {
    "LiquidationCall(address,address,address,uint256,uint256,address,bool,uint256)": EventFragment;
    "OriginationFeeLiquidated(address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidationCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OriginationFeeLiquidated"): EventFragment;
}

export type LiquidationCallEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string, boolean, BigNumber] & {
    _collateral: string;
    _reserve: string;
    _user: string;
    _purchaseAmount: BigNumber;
    _liquidatedCollateralAmount: BigNumber;
    _liquidator: string;
    _receiveWvToken: boolean;
    _timestamp: BigNumber;
  }
>;

export type OriginationFeeLiquidatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber] & {
    _collateral: string;
    _reserve: string;
    _user: string;
    _feeLiquidated: BigNumber;
    _liquidatedCollateralForFee: BigNumber;
    _timestamp: BigNumber;
  }
>;

export class LendingPoolLiquidationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LendingPoolLiquidationManagerInterface;

  functions: {
    addressesProvider(overrides?: CallOverrides): Promise<[string]>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveWvToken: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  liquidationCall(
    _collateral: string,
    _reserve: string,
    _user: string,
    _purchaseAmount: BigNumberish,
    _receiveWvToken: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressesProvider(overrides?: CallOverrides): Promise<string>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveWvToken: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  filters: {
    "LiquidationCall(address,address,address,uint256,uint256,address,bool,uint256)"(
      _collateral?: string | null,
      _reserve?: string | null,
      _user?: string | null,
      _purchaseAmount?: null,
      _liquidatedCollateralAmount?: null,
      _liquidator?: null,
      _receiveWvToken?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        boolean,
        BigNumber
      ],
      {
        _collateral: string;
        _reserve: string;
        _user: string;
        _purchaseAmount: BigNumber;
        _liquidatedCollateralAmount: BigNumber;
        _liquidator: string;
        _receiveWvToken: boolean;
        _timestamp: BigNumber;
      }
    >;

    LiquidationCall(
      _collateral?: string | null,
      _reserve?: string | null,
      _user?: string | null,
      _purchaseAmount?: null,
      _liquidatedCollateralAmount?: null,
      _liquidator?: null,
      _receiveWvToken?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        boolean,
        BigNumber
      ],
      {
        _collateral: string;
        _reserve: string;
        _user: string;
        _purchaseAmount: BigNumber;
        _liquidatedCollateralAmount: BigNumber;
        _liquidator: string;
        _receiveWvToken: boolean;
        _timestamp: BigNumber;
      }
    >;

    "OriginationFeeLiquidated(address,address,address,uint256,uint256,uint256)"(
      _collateral?: string | null,
      _reserve?: string | null,
      _user?: string | null,
      _feeLiquidated?: null,
      _liquidatedCollateralForFee?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        _collateral: string;
        _reserve: string;
        _user: string;
        _feeLiquidated: BigNumber;
        _liquidatedCollateralForFee: BigNumber;
        _timestamp: BigNumber;
      }
    >;

    OriginationFeeLiquidated(
      _collateral?: string | null,
      _reserve?: string | null,
      _user?: string | null,
      _feeLiquidated?: null,
      _liquidatedCollateralForFee?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        _collateral: string;
        _reserve: string;
        _user: string;
        _feeLiquidated: BigNumber;
        _liquidatedCollateralForFee: BigNumber;
        _timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveWvToken: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveWvToken: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
